Flex是Flexible Box的缩写 意为“弹性布局”，用来为盒状模型提供最大的灵活性。

任何一个容器都可以指定为flex
#box{
  display:flex;
}
行内元素也可以使用Flex布局。
.box{ display: inline-flex }
webkit内核的浏览器，必须加上 -webkit前缀
.box{
  display: -webkit-flex;  /*safari*/
  display: flex;
}

注意：设置为Flex布局的元素，子元素的float,clear和vertical-align都将失效。

二. 基本概念
采用flex布局的元素，称为Flex容器(flex container),简称“容器”。它的子元素自动成为容器成员，成为flex项目(flex item),简称"项目"
容器默认有两根轴：水平的主轴(main axis) 和垂直的交叉轴(cross axis).
主轴的开始位置(与边框的交叉点)叫做main start 结束位置叫做 main end
交叉轴的开始位置叫做 cross start   结束位置叫做 cross end
项目默认沿主轴排列，单个项目占据的主轴空间叫做 main size 占据的交叉轴的空间叫做 cross size.


三.容器的属性 -------一下6个属性设置在容器上：
flex-direction------决定主轴的方向(即项目的排列方向)
      flex-direction:row| row-reverse | column | column-reverse
      row(默认值)：主轴为水平方向，起点在左边
      row-reverse:主轴在水平方向，起点在右边
      column: 主轴在垂直方向，起点在上沿
      column: 主轴在垂直方向，起点在下沿
flex-wrap ---------默认情况下，项目都排列在一条线(又称“轴线”)上，flex-wrap属性定义，如果一条轴线  排不下，如何换行。
      flex-wrap:nowrap |  wrap | wrap-reverse
      nowrap(默认值)：不换行
      wrap： 换行 第一行在上面
      wrap-reverse: 换行 第一行在下面
flex-flow -------------是flex-direction和 flex-wrap的简写形式，默认值为 row nowrap
      flex-flow:<flex-direction>||<flex-wrap>
justify-content---------定义了项目在主轴上的对齐方式
      justity-content: flex-start | flex-end |  center |  space-between | space-around
      flex-start(默认值)：左对齐
      flex-end: 右对齐
      center: 居中
      space-between: 两段对齐，项目之间的间隔都相等
      space-around: 每个项目两侧的距离相等，所以，项目之间的距离比项目与变边框的距离大一倍。
align-items--------定义项目在交叉轴上如何对齐
       align-items: flex-start | flex-end | center | baseline | stretch
       flex-start: 交叉轴的起点对齐
       flex-end: 交叉轴的终点对齐
       center: 交叉轴的中点对齐
       baseline: 项目的第一行文字的基线对齐
       stretch(默认值)：如果项目未设置高度或设为auto，将占满整个容器的高度。
align-content------定义了多根轴线的对齐方式，如果项目只有一根轴线，该属性不起作用
      align-content: flex-start | flex-end | center | space-between | stretch | space-around
      flex-start:与交叉轴的起点对齐
      flex-end: 与交叉轴的终点对齐
      center: 与交叉轴的中点对齐
      space-between: 与交叉轴两端对齐，轴线之间间隔平均分配
      space-around: 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍
      stretch（默认值）：轴线占满整个交叉轴。
      
      
      
 四.项目的属性---------一下6个属性设置在项目上
 order------定义了项目的排列顺序。数字越小越在前面，默认为0
 .item{ order: <integer> }
 flex-grow------定义项目的放大比例，默认为0，即存在剩余空间也不放大
 .item{ flex-grow: <number> }
 -----如果所有项目的flex-grow的属性都为1，则它们将等分剩余空间(如果有的话)，如果一个项目的flex-grow属性为2，其它项目都为1，则前者占的剩余空间
 将比其它项目多一倍
 flex-shrink---------项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。
 .item{ flex-shrink:<number> }
 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。
 flex-basis----------定义了在分配多余空间之前，项目占据的主轴空间(main size).浏览器根据这个属性，计算主轴是否有剩余空间，它的默认值为auto
 即项目本身的大小。
 .item { flex-basis: <number> }
 它可以设为跟width或height属性一样的值(比如说350px),则项目占据的固定空间
 flex-----是flex-grow flex-shrink flex-basis的简写 默认值为 0 1 auto,后面两个属性可选。
 .item{flex:none |[<'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。
建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值
 align-self-----允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，
 如果没有父元素，则等同于stretch。
 
 .item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
} 
属性可能取6个值，除了auto，其他都与align-items属性完全一致。
 
 
 
      
      
      
      
      
      
